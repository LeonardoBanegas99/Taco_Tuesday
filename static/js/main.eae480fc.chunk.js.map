{"version":3,"sources":["logo.svg","Coleccion.js","Carta.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Coleccion","Component","class","href","App","state","todos","monkey","JSON","stringify","this","localStorage","setItem","map","todo","i","className","src","imagendir","titulo","cuerpo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yqDAAAA,EAAOC,QAAU,IAA0B,kC,qICkE5BC,G,iBC/DKC,Y,iLDEhB,OACE,yBAAKC,MAAQ,aACb,wBAAIA,MAAM,0BAEV,wBAAIA,MAAM,qBAAoB,+CAC9B,wBAAIA,MAAM,mBACR,0BAAMA,MAAQ,SAAd,mBACA,uBAAGC,KAAK,GAAGD,MAAM,qBACf,uBAAGC,KAAK,IAAID,MAAQ,yBAClB,sCACA,uBAAGA,MAAM,kCAAT,YAKN,wBAAIA,MAAM,mBACR,0BAAMA,MAAQ,SAAd,iBACA,uBAAGC,KAAK,GAAGD,MAAM,qBACf,uBAAGC,KAAK,IAAID,MAAQ,yBAClB,sCACA,uBAAGA,MAAM,kCAAT,YAKN,wBAAIA,MAAM,mBACR,0BAAMA,MAAQ,SAAd,kBACA,uBAAGC,KAAK,GAAGD,MAAM,qBACf,uBAAGC,KAAK,IAAID,MAAQ,yBAClB,sCACA,uBAAGA,MAAM,kCAAT,YAKN,wBAAIA,MAAM,mBACR,0BAAMA,MAAQ,SAAd,qBACA,uBAAGC,KAAK,GAAGD,MAAM,qBACf,uBAAGC,KAAK,IAAID,MAAQ,yBAClB,sCACA,uBAAGA,MAAM,kCAAT,YAKN,wBAAIA,MAAM,mBACV,0BAAMA,MAAQ,SAAd,kBACA,uBAAGC,KAAK,GAAGD,MAAM,qBACf,uBAAGC,KAAK,IAAID,MAAQ,yBAClB,sCACA,uBAAGA,MAAM,kCAAT,kB,GApDcD,c,OEqDTG,E,YA7Cb,aAAc,IAAD,8BACX,+CACKC,MAAQ,CACXC,WAHS,E,sEAOX,IAAIC,EAASC,KAAKC,UAAUC,KAAKL,MAAMC,OACvCK,aAAaC,QAAQ,SAASL,GAC9B,IAAMD,EAAQI,KAAKL,MAAMC,MAAMO,IAAI,SAACC,EAAKC,GACvC,OACE,yBAAKC,UAAY,QAAQd,MAAM,OAC/B,yBAAKA,MAAM,oBACX,yBAAKA,MAAM,QACT,yBAAKA,MAAM,cACT,yBAAKe,IAAKH,EAAKI,YACf,0BAAMhB,MAAM,yBAAyBY,EAAKK,SAE9C,yBAAKjB,MAAM,gBACRY,EAAKM,aAOd,OACE,6BAEA,yBAAKlB,MAAQ,yBACb,yBAAKA,MAAM,eACX,uBAAGC,KAAK,IAAID,MAAM,qBAAlB,WAIA,yBAAKA,MAAQ,aACb,kBAAC,EAAD,OAECI,O,GAvCaL,aCEEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.eae480fc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\nimport 'materialize-css/dist/css/materialize.min.css';\r\n\r\nclass Coleccion extends Component{\r\n  render(){\r\n    return(\r\n      <div class = \"container\">\r\n      <ul class=\"collection with-header\">\r\n\r\n      <li class=\"collection-header\"><h4>Tipos de Tacos</h4></li>\r\n      <li class=\"collection-item\">\r\n        <span class = \"title\">Tacos Al Pastor</span>\r\n        <a href=\"\" class=\"secondary-content\">\r\n          <a href=\"#\" class = \"btn fix cyan darken-4\">\r\n            <span>Show</span>\r\n            <i class=\"material-icons blue-text right\">image</i>\r\n        </a>\r\n        </a>\r\n      </li>\r\n\r\n      <li class=\"collection-item\">\r\n        <span class = \"title\">Tacos Dorados</span>\r\n        <a href=\"\" class=\"secondary-content\">\r\n          <a href=\"#\" class = \"btn fix cyan darken-4\">\r\n            <span>Show</span>\r\n            <i class=\"material-icons blue-text right\">image</i>\r\n        </a>\r\n        </a>\r\n      </li>\r\n\r\n      <li class=\"collection-item\">\r\n        <span class = \"title\">Tacos Doblados</span>\r\n        <a href=\"\" class=\"secondary-content\">\r\n          <a href=\"#\" class = \"btn fix cyan darken-4\">\r\n            <span>Show</span>\r\n            <i class=\"material-icons blue-text right\">image</i>\r\n        </a>\r\n        </a>\r\n      </li>\r\n\r\n      <li class=\"collection-item\">\r\n        <span class = \"title\">Tacos de Carnitas</span>\r\n        <a href=\"\" class=\"secondary-content\">\r\n          <a href=\"#\" class = \"btn fix cyan darken-4\">\r\n            <span>Show</span>\r\n            <i class=\"material-icons blue-text right\">image</i>\r\n        </a>\r\n        </a>\r\n      </li>\r\n\r\n      <li class=\"collection-item\">\r\n      <span class = \"title\">Tacos de Pollo</span>\r\n      <a href=\"\" class=\"secondary-content\">\r\n        <a href=\"#\" class = \"btn fix cyan darken-4\">\r\n          <span>Show</span>\r\n          <i class=\"material-icons blue-text right\">image</i>\r\n      </a>\r\n      </a>\r\n      </li>\r\n\r\n      </ul>\r\n        </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default Coleccion;\r\n","import React, {Component} from 'react';\r\nimport 'materialize-css/dist/css/materialize.min.css';\r\n\r\nclass Carta extends Component{\r\n  render(){\r\n    return(\r\n      <div className = \"Carta\" class=\"row\">\r\n      <div class=\"col s6 offset-s3\">\r\n      <div class=\"card\">\r\n        <div class=\"card-image\">\r\n          <img src={this.props.imagendir}/>\r\n          <span class=\"card-title black-text\">{this.props.titulo}</span>\r\n          </div>\r\n      <div class=\"card-content\">\r\n        {this.props.cuerpo}\r\n      </div>\r\n      </div>\r\n      </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Carta;\r\n","import React,{Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Carta from './Carta';\nimport Coleccion from './Coleccion';\nimport {todos} from './todos.json';\n\nimport 'materialize-css/dist/css/materialize.min.css';\n\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      todos\n    }\n  }\n  render(){\n    var monkey = JSON.stringify(this.state.todos);\n    localStorage.setItem('monkey',monkey);\n    const todos = this.state.todos.map((todo,i) =>{\n      return(\n        <div className = \"Carta\" class=\"row\">\n        <div class=\"col s6 offset-s3\">\n        <div class=\"card\">\n          <div class=\"card-image\">\n            <img src={todo.imagendir}/>\n            <span class=\"card-title black-text\">{todo.titulo}</span>\n            </div>\n        <div class=\"card-content\">\n          {todo.cuerpo}\n        </div>\n        </div>\n        </div>\n        </div>\n      );\n    })\n  return (\n    <div>\n\n    <nav class = \"red darken-3 darken-4\">\n    <div class=\"nav-wrapper\">\n    <a href=\"#\" class=\"brand-logo center\">Tacos</a>\n    </div>\n    </nav>\n\n    <div class = \"container\">\n    <Coleccion/>\n    </div>\n    {todos}\n\n    </div>\n  );\n}\n}\n\nexport default App;\n\n/*<ul id=\"nav-mobile\" class=\"left hide-on-med-and-down\">\n  <li><a href=\"sass.html\">Sass</a></li>\n  <li><a href=\"badges.html\">Components</a></li>\n  <li><a href=\"collapsible.html\">JavaScript</a></li>\n</ul>*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}